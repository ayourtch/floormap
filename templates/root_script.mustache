var selectedElement = undefined;
var ongoingTouches = [];
var page_images_cache = [];
var defaultLabelSize = 0;
var defaultTypeObjectUUID = null;

var currentMouseX = null;
var currentMouseY = null;
var mouse_tracking_active = false;

var initial_page_loading = true;

var poll_min_timeout = 1000;
var poll_max_timeout = 15000;

var poll_cur_timeout = poll_min_timeout;
var poll_start_time = 0;

var client_restart_epoch = -1;
var client_message = "";

var populate_quick_search_value = null;


function onMouseUpdate(e) {
    var cnv = document.getElementById("floor_canvas");
    var cnv_rect = cnv.getBoundingClientRect();
    var MapX = Math.round(e.clientX);
    var MapY = Math.round(e.clientY);
    currentMouseX = MapX;
    currentMouseY = MapY;
    // console.debug(e.clientX, e.clientY);
}

function getMouseX() {
    return currentMouseX;
}

function getMouseY() {
    return currentMouseY;
}

function load_item_type(el) {
    var dd = document.getElementById("edit_item_type");
    var i;
    console.log("Item type: " + el.type_object_uuid);
    if (el.type_object_uuid == null) {
        dd.selectedIndex = 0;
    }
    for (i = 0; i < dd.length; i++) {
        if (dd[i].value == el.type_object_uuid) {
            dd.selectedIndex = i;
        }
    }
}

function clear_item_details() {
    var txt = document.getElementById("edit_item_name");
    txt.value = "";
    var txt = document.getElementById("edit_item_desc");
    txt.value = "";
    var txt = document.getElementById("edit_item_meta");
    txt.value = "";
}

function load_item_details(el) {
    var txt = document.getElementById("edit_item_name");
    txt.value = get_item_label(el);
    var txt = document.getElementById("edit_item_desc");
    txt.value = get_item_description(el);
    var txt = document.getElementById("edit_item_meta");
    txt.value = get_item_meta(el);
    load_item_type(el);
}


function save_item_type() {
    if (selectedElement != undefined) {
        var dd = document.getElementById("edit_item_type");
        if (dd.selectedIndex == 0) {
            selectedElement.type_object_uuid = null;
        } else {
            selectedElement.type_object_uuid = dd[dd.selectedIndex].value;
        }
        defaultTypeObjectUUID = selectedElement.type_object_uuid;
    }
}

function save_item_details(editor_element_id, desc_element_id, meta_element_id) {
    var txt = document.getElementById(editor_element_id);
    if (selectedElement != undefined) {
        set_item_label(selectedElement, txt.value);
        var txt2 = document.getElementById(desc_element_id);
        set_item_description(selectedElement, txt2.value);
        var txt3 = document.getElementById(meta_element_id);
        set_item_meta(selectedElement, txt3.value);
        save_item_type();

        SaveName(selectedElement);
        set_map_items_visibility();
    }
}

function delete_active_item() {
    if (selectedElement != undefined) {
        DeleteItem(selectedElement);
        setSelectedElement(undefined);
    }
}

function adjust_item_label_size(delta) {
    if (selectedElement != undefined) {
        var sz = selectedElement.labelsize;
        /*
        set_item_labelsize(selectedElement, sz + delta);
        */
        selectedElement.labelsize = sz + delta;
        defaultLabelSize = selectedElement.labelsize;
        SaveName(selectedElement);

    }
}

function setSelectedElement(elmnt) {
    if (selectedElement != undefined) {
        selectedElement.classList.remove("sw1");
        selectedElement.classList.add("sw0");
    }
    if (elmnt != undefined) {
        elmnt.classList.remove("sw0");
        elmnt.classList.add("sw1");
        selectedElement = elmnt;
        load_item_details(elmnt);
        // document.getElementById("new_item_details").classList.add("hidden_pane");
        // document.getElementById("existing_item_details").classList.remove("hidden_pane");
    } else {
        if (selectedElement != undefined) {
            // document.getElementById("existing_item_details").classList.add("hidden_pane");
            // document.getElementById("new_item_details").classList.remove("hidden_pane");
            selectedElement = undefined;
        }
        clear_item_details();
    }
}

var poll_timeout_reset = 0;
var ok_request_count = 0;
var timeout_count = 0;

function check_poll_timeout(start_time, is_timeout) {
    var delta = get_time_ms() - start_time;
    if (is_timeout) {
        delta = poll_cur_timeout;
        ok_request_count = 0;
        timeout_count = timeout_count + 1;
    } else {
        ok_request_count = ok_request_count + 1;
        timeout_count = 0;
    }
    var txt = "";

    if (delta > poll_cur_timeout / 2) {
        /* backend not responsive */
        poll_cur_timeout = 2 * poll_cur_timeout;
        if (poll_cur_timeout > poll_max_timeout) {
            poll_cur_timeout = poll_max_timeout;
        }
    } else {
        if (ok_request_count > 1) {
            poll_cur_timeout = poll_cur_timeout - 100;
        } else {
            poll_cur_timeout = poll_min_timeout;
            poll_timeout_reset = get_time_ms();
        }
        if (poll_cur_timeout < poll_min_timeout) {
            poll_cur_timeout = poll_min_timeout;
        }

    }
    console.debug("New poll timeout: " + poll_cur_timeout);
    var info = document.getElementById("last_poll_duration");
    if (is_timeout) {
        delta = "timeout or error";
    } else {
        delta = "last rtt " + delta + "ms";
    }
    if (timeout_count > 0) {
        txt = " probe " + timeout_count;
    }
    if (info != null) {
        info.innerHTML = "(" + delta + " / wait " + poll_cur_timeout + "ms)" + txt + " " + client_message;
    }
}

function getJSON(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'json';
    poll_start_time = get_time_ms();

    var timeout_timer = setTimeout(function() {
        console.debug("Timeout detected by timer...");
        xhr.abort();
        var status = xhr.status;
        check_poll_timeout(poll_start_time, true);
        callback(status, null);
        xhr = null;
    }, poll_max_timeout);
    xhr.onload = function() {
        var status = xhr.status;
        clearTimeout(timeout_timer);
        timeout_timer = null;
        if (status === 200) {
            check_poll_timeout(poll_start_time, false);
            callback(null, xhr.response);
        } else {
            check_poll_timeout(poll_start_time, true);
            console.debug("Request error...");
            callback(status, xhr.response);
        }
        xhr = null;
    };
    xhr.send();
}

function putJSON(url, data, callback) {
    var json = JSON.stringify(data);
    var xhr = new XMLHttpRequest();
    xhr.open('PUT', url, true);
    xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
    xhr.responseType = 'json';
    xhr.onload = function() {
        var status = xhr.status;
        if (status === 200) {
            callback(null, xhr.response);
        } else {
            callback(status, xhr.response);
        }
    };
    xhr.send(json);
}

function get_item_id(jse) {
    return get_item_id_from_uuid(jse["MapObjectUUID"]);
}

function get_item_id_from_uuid(uuid) {
    var el_id = "item_" + uuid.replace(/-/gi, "_");
    return el_id;
}

function get_item_from_uuid(uuid) {
    var el_id = get_item_id_from_uuid(uuid);
    return document.getElementById(el_id);
}

function get_map_id_from_uuid(uuid) {
    var el_id = "map_" + uuid.replace(/-/gi, "_");
    return el_id;
}

function get_map2_id_from_uuid(uuid) {
    var el_id = "map2_map_" + uuid.replace(/-/gi, "_");
    return el_id;
}

function get_map_id(jse) {
    var el_id = get_map_id_from_uuid(jse["FloorMapUUID"]);
    return el_id;
}

function get_map2_id(jse) {
    var el_id = get_map2_id_from_uuid(jse["FloorMapUUID"]);
    return el_id;
}

// var api_root = document.baseURI + "/api/";
var api_root = document.location.protocol + "//" + document.location.host + document.location.pathname.split("/").slice(0, -1).join("/") + "/api/";
console.log("API root:" + api_root);
console.log(document.location);
var next_poll_horizon = 0;
var current_floorplan_uuid = null;
var current_floorplan2_uuid = null;
var current_map_uuid = null;
var current_map2_uuid = null;
var compare_map2_active = false;
var current_set_map_uuid = null;
var current_set_map2_uuid = null;
var current_quick_search = "";
var uploads = new Object();

function get_floormap_srcX_version(base, uuid, file_version) {
    if (file_version != undefined) {
        return (base + uuid + "/" + file_version);
    } else {
        return (base + uuid);
    }
}

function get_floormap_srcX(base, uuid) {
    var el = get_map_from_uuid(uuid);
    if (el != null && el.file_version != undefined) {
        return get_floormap_srcX_version(base, uuid, el.file_version);
    } else {
        return get_floormap_srcX_version(base, uuid, undefined);
    }
}

function get_floormap_src(uuid) {
    var src = get_floormap_srcX("images/floormaps/", uuid);
    console.log("get_floormap_srcRET: " + src);
    return src;
}

function get_floormap_thumbnail_src(uuid) {
    var src = get_floormap_srcX("images/floormaps/thumbnails/", uuid);
    console.log("get_floormap_thumbnail_srcRET: " + src);
    return src;
}

function get_floormap_thumbnail_src_version(uuid, version) {
    var src = get_floormap_srcX_version("images/floormaps/thumbnails/", uuid, version);
    console.log("get_floormap_thumbnail_srcRET: " + src);
    return src;
}

function get_map_from_uuid(uuid) {
    if (uuid == null || uuid == undefined) {
        return null;
    }
    var el_id = get_map_id_from_uuid(uuid);
    var el = document.getElementById(el_id);
    return el;
}

function get_map2_from_uuid(uuid) {
    if (uuid == null || uuid == undefined) {
        return null;
    }
    var el_id = get_map2_id_from_uuid(uuid);
    var el = document.getElementById(el_id);
    return el;
}

function set_map_items_visibility() {

    var elts = document.getElementsByClassName("item");
    var svg_elt = document.getElementById("map_svg");
    if (svg_elt == null) {
        /* not in map editing mode */
        for (var i = 0; i < elts.length; i++) {
            elts[i].style.display = "none";
        }
        return;
    }

    for (var i = 0; i < elts.length; i++) {
        set_item_visibility(elts[i]);
        apply_item_style(elts[i]);
    }
    fixup_legend_table();
}

function svg_crosshairs(color) {
    var res = '<path   d="M -10 0 L 10 0" fill="none" stroke="' + color + '"></path>' +
        '<path   d="M 0 -10 L 0 10" fill="none" stroke="' + color + '"></path>';
    return res;
}

function set_map_svg() {
    var svg_elt = document.getElementById("map_svg");

    if (svg_elt != null) {
        var svg = "";
        console.log("Setting map SVG");

        if (current_set_map_uuid != undefined) {
            var el = get_map_from_uuid(current_set_map_uuid);
            var cnv = document.getElementById("floor_canvas");
            var cnv_rect = cnv.getBoundingClientRect();
            var dx = 0; // cnv_rect.left;
            var dy = 0; // cnv_rect.top;
            var el = get_map_from_uuid(current_set_map_uuid);
            var x1 = el.clip_left;
            var y1 = el.clip_top;
            var x2 = el.clip_left + el.clip_width;
            var y2 = el.clip_top + el.clip_height;
            svg = svg + '<svg  style="position:absolute; left:' + x1 + 'px;top:' + y1 + 'px; width:auto; height:auto; overflow:visible;">';
            svg = svg + svg_crosshairs('#f00');
            svg = svg + '</svg>';


            svg = svg + '<svg  style="position:absolute; left:' + x2 + 'px;top:' + y2 + 'px; width:auto; height:auto; overflow:visible;">';
            svg = svg + svg_crosshairs('#008');
            svg = svg + '</svg>';

            svg = svg + '<svg class="screen-only" style="position:absolute; left:' + x1 + 'px;top:' + y1 + 'px; width:auto; height:auto; overflow:visible;">';
            svg = svg + '<path d="M 0 0 L ' + (x2 - x1) + ' 0 L ' + (x2 - x1) + ' ' + (y2 - y1) + ' L 0 ' + (y2 - y1) + ' L 0 0" fill="none" stroke-dasharray="8" stroke="#888"></path>';
            svg = svg + '</svg>';
        }
        svg_elt.innerHTML = svg;
    }
}

function set_current_map(uuid) {
    console.log(new Error().stack);
    console.log("SET CURR MAP:" + uuid);
    if (current_set_map_uuid != undefined) {
        var el = get_map_from_uuid(current_set_map_uuid);
        if (el != null) {
            el.classList.remove("selected-thumbnail");
        }
    }
    if (current_map_uuid != undefined) {
        var el = get_map_from_uuid(current_map_uuid);
        if (el != null) {
            el.classList.remove("selected-thumbnail");
        }
    }
    current_map_uuid = uuid;
    current_set_map_uuid = uuid;
    if (current_map_uuid != undefined) {
        var el = get_map_from_uuid(current_map_uuid);
        if (el != null) {
            el.classList.add("selected-thumbnail");
            el.scrollIntoView();
        }
    }
    if (uuid != undefined) {
        document.location.hash = current_map_uuid;
        var el = document.getElementById("map");
        el.src = get_floormap_src(uuid);
    } else {
        var el = document.getElementById("map");
        el.src = "static/grid_page.png";
    }
    set_map_items_visibility();
    set_map_svg();
    fixup_coloring();
}

function draw_compare_map2() {
    var uuid = current_map2_uuid;
    if (uuid != undefined) {
        if (compare_map2_active) {
            var el = document.getElementById("map2compare");
            el.src = get_floormap_src(uuid);
        } else {
            var el = document.getElementById("map2compare");
            el.src = "";
        }
    }
}

function toggle_compare_map2() {
    if (current_map2_uuid != undefined) {
        compare_map2_active = !compare_map2_active;
        draw_compare_map2();
    }
}

function set_current_map2(uuid) {
    console.log(new Error().stack);
    console.log("SET CURR MAP2:" + uuid);
    if (current_set_map2_uuid != undefined) {
        var el = get_map2_from_uuid(current_set_map2_uuid);
        if (el != null) {
            el.classList.remove("selected-thumbnail");
        }
    }
    if (current_map2_uuid != undefined) {
        var el = get_map2_from_uuid(current_map2_uuid);
        if (el != null) {
            el.classList.remove("selected-thumbnail");
        }
    }
    current_map2_uuid = uuid;
    current_set2_map_uuid = uuid;
    if (current_map2_uuid != undefined) {
        var el = get_map2_from_uuid(current_map2_uuid);
        if (el != null) {
            el.classList.add("selected-thumbnail");
            el.scrollIntoView();
        }
    }
    if (uuid != undefined) {
        var el = document.getElementById("map2");
        el.src = get_floormap_src(uuid);
        draw_compare_map2();
    } else {
        var el = document.getElementById("map2");
        el.src = "static/grid_page.png";
    }
    set_map_items_visibility();
    set_map_svg();
}

function checkTime(i) {
    return (i < 10) ? "0" + i : i;
}

function get_time_ms() {
    var d = new Date();
    var n = d.getTime();
    return n;
}

function processJSON(err, reply_data) {
    if (err !== null) {
        console.error('Something went wrong: ' + err);
        setTimeout(JsonPollCycle, poll_cur_timeout);
        return;
    }
    // alert('Your data: ' + data.length);
    if (reply_data == null) {
        console.error("Reply data was null...");
        // alert("Data was null");
        setTimeout(JsonPollCycle, poll_cur_timeout);
        return;
    }

    var poll_elt = document.getElementById("last_poll_time");
    if (poll_elt != null) {
        poll_elt.classList.remove("gradually-red");
        void poll_elt.offsetWidth; // trigger a DOM reflow
    }
    var today = new Date();
    var time = checkTime(today.getHours()) + ":" + checkTime(today.getMinutes()) + ":" + checkTime(today.getSeconds());
    if (poll_elt != null) {
        poll_elt.innerHTML = "Last polled at " + time;
        poll_elt.classList.add("gradually-red");
    }
    if (client_restart_epoch == -1) {
        client_restart_epoch = reply_data["ClientRestartEpoch"];
    } else {
        if (reply_data["ClientRestartEpoch"] > client_restart_epoch) {
            client_restart_epoch = reply_data["ClientRestartEpoch"];
            var tim = Math.round(Math.random() * 30000);
            client_message = "Server-initiated reload (" + tim + "ms)";
            setTimeout(function() {
                location.reload(true);
            }, tim);
        }
    }

    var new_default_floormap_uuid = undefined;
    if (current_map_uuid == null) {
        if (document.location.hash != "") {
            new_default_floormap_uuid = document.location.hash.substr(1);
        }
    } else {
        if (document.location.hash != "#" + current_map_uuid) {
            new_default_floormap_uuid = document.location.hash.substr(1);
        }
    }
    var floorplans_data = reply_data["FloorPlans"];
    for (var i = 0; i < floorplans_data.length; i++) {
        var jfe = floorplans_data[i];
        if (current_floorplan_uuid == undefined && jfe["Active"]) {
            current_floorplan_uuid = jfe["FloorPlanUUID"];
            console.log("Set current floorplan to " + current_floorplan_uuid);
        }
        if (current_floorplan2_uuid == undefined && !jfe["Active"]) {
            current_floorplan2_uuid = jfe["FloorPlanUUID"];
        }
        var dd = document.getElementById("curr_floorplan");
        if (dd != null) {
            var option = document.createElement("option");
            option.text = jfe["Name"] + " : " + jfe["Description"];
            if (jfe["Active"]) {
                option.text = option.text + " (Active)";
            }
            option.value = jfe["FloorPlanUUID"];
            if (current_floorplan_uuid == jfe["FloorPlanUUID"]) {
                option.selected = true;
            }
            dd.add(option);
        }
        var dd = document.getElementById("curr_floorplan2");
        if (dd != null) {
            var option = document.createElement("option");
            option.text = jfe["Name"] + " : " + jfe["Description"];
            if (jfe["Active"]) {
                option.text = option.text + " (Active)";
            }
            if (current_floorplan2_uuid == jfe["FloorPlanUUID"]) {
                option.selected = true;
            }
            option.value = jfe["FloorPlanUUID"];
            dd.add(option);
        }
    }

    var data = reply_data["MapObjects"];
    var floors_data = reply_data["FloorMaps"];
    next_poll_horizon = reply_data["NextPollHorizon"];
    // console.debug("floors_data len: " + floors_data.length);
    // console.debug("objects_data len: " + data.length);
    for (var i = 0; i < floors_data.length; i++) {
        var jse = floors_data[i];
        if (new_default_floormap_uuid == undefined) {
            new_default_floormap_uuid = jse["FloorMapUUID"];
        }
        if (current_map_uuid == null) {
            //set_current_map(jse["FloorMapUUID"]);
        }
        var el_id = get_map_id(jse);
        var el = document.getElementById(el_id);
        if (el != null) {
            update_map_jso(el, jse)
        } else {
            if (!jse["Deleted"]) {
                add_map_jso(jse)
            }
        }

        if (document.getElementById("map2") != null) {
            var el_id = get_map2_id(jse);
            var el = document.getElementById(el_id);
            if (el != null) {
                update_map2_jso(el, jse)
            } else {
                if (!jse["Deleted"]) {
                    add_map2_jso(jse)
                }
            }
        }
    }
    // console.debug("Next poll for map " + current_map_uuid + " : " + next_poll_horizon);

    for (var i = 0; i < data.length; i++) {
        var jse = data[i];
        var el_id = get_item_id(jse);
        var el = document.getElementById(el_id);
        if (el != null) {
            update_item_jso(el, jse)
        } else {
            if (!jse["Deleted"]) {
                add_item_jso(jse)
            }
        }
    }
    var upload_data = reply_data["Uploads"];
    for (var i = 0; i < upload_data.length; i++) {
        var jse = upload_data[i];
        if (jse["Deleted"]) {} else {
            update_upload_from_jse(jse);
        }
    }

    var floors_data = reply_data["FloorMaps"];
    if (get_map_from_uuid(current_map_uuid) == null) {
        if (new_default_floormap_uuid != undefined) {
            current_set_map_uuid = new_default_floormap_uuid;
        } else {
            current_set_map_uuid = undefined;
        }
    }
    if (current_set_map_uuid != undefined) {
        if (current_map_uuid != current_set_map_uuid) {
            set_current_map(current_set_map_uuid);
            console.log("SET CURRENT MAP:" + current_set_map_uuid);
            var elt = get_map_from_uuid(current_set_map_uuid);
            if (elt != null) {
                elt.scrollIntoView();
            }
        }
    }

    if (populate_quick_search_value) {
        var e = document.getElementById('quickSearch');
        e.value = populate_quick_search_value;
        populate_quick_search_value = null;
        PerformQuickSearch(e.value);
    }

    if (initial_page_loading) {
        var did_set_map = false;

        var t = document.getElementById('page_thumbnails');
        console.log("child node count: ", t.childNodes.length);
        for (var i = 3; i < t.childNodes.length; i++) {
            // console.log("Child ", i, " : ", t.childNodes[i].nodeName);
            var thumb = t.childNodes[i];

            if (thumb.style && thumb.style.display != "none") {
                console.log("Child: " + thumb.child_uuid);
                if (!did_set_map) {
                    did_set_map = true;
                    console.log("Setting current map");
                    set_current_map(thumb.child_uuid);
                }
            }
        }

        initial_page_loading = false;
    }
    setTimeout(JsonPollCycle, poll_cur_timeout);
}


function JsonPollCycle() {
    var api_url = api_root + "v1/mapobjects/get/json" + "/" + next_poll_horizon;
    // console.debug("Polling: " + api_url);
    getJSON(api_url, processJSON);
}

function check_save(data) {}

var total_saving = 0;

function MoveNode(node, x, y) {
    node.style.left = x + "px";
    node.style.top = y + "px";
    SavePosition(node);
}

function SaveMapClipArea(node) {
    var api_url = api_root + "v1/floormaps/clip/put/json";
    var data = new Object();
    data["FloorMapUUID"] = node.uuid;
    data["ClipLeft"] = Math.round(node.clip_left);
    data["ClipTop"] = Math.round(node.clip_top);
    data["ClipWidth"] = Math.round(node.clip_width);
    data["ClipHeight"] = Math.round(node.clip_height);
    var arr = new Array();
    arr[0] = data;
    total_saving++;
    document.body.style.cursor = 'wait';
    putJSON(api_url, arr, function() {
        total_saving--;
        if (total_saving == 0) {
            document.body.style.cursor = 'default';
        }
        console.debug("Saved for " + node.uuid);
    });
}

function SaveMapName(node) {
    var api_url = api_root + "v1/floormaps/name/put/json";
    var data = new Object();
    data["FloorMapUUID"] = node.uuid;
    data["Name"] = get_map_label(node);
    var arr = new Array();
    arr[0] = data;
    total_saving++;
    document.body.style.cursor = 'wait';
    putJSON(api_url, arr, function() {
        total_saving--;
        if (total_saving == 0) {
            document.body.style.cursor = 'default';
        }
        console.debug("Saved for " + node.uuid);
    });
}

function SaveMapLegendInfoValues(node, X, Y, Size) {
    var api_url = api_root + "v1/floormaps/legend/put/json";
    var data = new Object();
    data["FloorMapUUID"] = node.uuid;
    data["LegendLeft"] = Math.round(X);
    data["LegendTop"] = Math.round(Y);
    data["LegendFontSize"] = Size;
    var arr = new Array();
    arr[0] = data;
    total_saving++;
    document.body.style.cursor = 'wait';
    putJSON(api_url, arr, function() {
        total_saving--;
        if (total_saving == 0) {
            document.body.style.cursor = 'default';
        }
        console.debug("Saved for " + node.uuid);
    });
}

function SaveMapLegendXY(node, X, Y) {
    SaveMapLegendInfoValues(node, X, Y, node.legend_font_size);
}

function SaveMapLegendSize(node, Size) {
    SaveMapLegendInfoValues(node, node.legend_left, node.legend_top, Size);
}

function SavePosition(node) {
    var api_url = api_root + "v1/mapobjects/xy/put/json";
    var cnv = document.getElementById("floor_canvas");
    var cnv_rect = cnv.getBoundingClientRect();
    var rect = node.getBoundingClientRect();
    var data = new Object();
    /* apparently with varoius zooms the left/top may be fractional! */
    var MapX = Math.round(rect.left - cnv_rect.left);
    var MapY = Math.round(rect.top - cnv_rect.top);
    console.debug("Maybe Saving position: " + node.uuid + " X: " + MapX + " Y: " + MapY);
    console.debug("rect X: " + rect.left + " Y: " + rect.top + " cnv X: " + cnv_rect.left + " Y: " + cnv_rect.top);
    if (rect.left < cnv_rect.left) {
        console.warn("Rect left " + rect.left + " < cnv rect left " + cnv_rect.left);
        return;
    }
    if (rect.top < cnv_rect.top) {
        console.warn("Rect top " + rect.top + " < cnv rect top " + cnv_rect.top);
        return;
    }
    data["MapX"] = MapX;
    data["MapY"] = MapY;
    data["ArrowX"] = node.arrow_x;
    data["ArrowY"] = node.arrow_y;
    data["MapObjectUUID"] = node.uuid;
    var arr = new Array();
    arr[0] = data;
    node.f7n.saving++;
    total_saving++;
    document.body.style.cursor = 'wait';
    node.style.cursor = 'wait';
    console.debug("Saving position: " + node.uuid + " X: " + MapX + " Y: " + MapY);
    putJSON(api_url, arr, function() {
        node.f7n.saving--;
        total_saving--;
        if (node.f7n.saving == 0) {
            node.style.cursor = 'move';
        }
        if (total_saving == 0) {
            document.body.style.cursor = 'default';
        }
        console.debug("Saved for " + node.uuid);
    });
}

function DeleteItem(node) {
    var api_url = api_root + "v1/mapobjects/delete/put/json";
    var data = new Object();
    data["MapObjectUUID"] = node.uuid;
    total_saving++;
    node.style.cursor = 'wait';
    document.body.style.cursor = 'wait';
    var arr = new Array();
    arr[0] = data;
    putJSON(api_url, arr, function(err, res) {
        total_saving--;
        if (total_saving == 0) {
            document.body.style.cursor = 'default';
        }
    });
}

function DeleteFloorMapByUUID(uuid) {
    var api_url = api_root + "v1/floormaps/delete/put/json";
    var data = new Object();
    data["FloorMapUUID"] = uuid;
    total_saving++;
    document.body.style.cursor = 'wait';
    var arr = new Array();
    arr[0] = data;
    putJSON(api_url, arr, function(err, res) {
        total_saving--;
        if (total_saving == 0) {
            document.body.style.cursor = 'default';
        }
    });
}

function SaveName(node) {
    var api_url = api_root + "v1/mapobjects/name_description/put/json";
    var data = new Object();
    data["Name"] = get_item_label(node);
    data["Description"] = get_item_description(node);
    data["Meta"] = get_item_meta(node);
    data["MapObjectUUID"] = node.uuid;
    data["TypeObjectUUID"] = node.type_object_uuid;
    data["LabelSize"] = node.labelsize;
    node.f7n.saving++;
    total_saving++;
    node.style.cursor = 'wait';
    document.body.style.cursor = 'wait';
    console.log("Saving name: " + node.uuid + " name: " + data["Name"]);
    console.log("Saving data: " + JSON.stringify(data));
    var arr = new Array();
    arr[0] = data;
    putJSON(api_url, arr, function(err, res) {
        node.f7n.saving--;
        total_saving--;
        if (node.f7n.saving == 0) {
            node.style.cursor = 'move';
        }
        if (total_saving == 0) {
            document.body.style.cursor = 'default';
        }
        console.debug("Saved for " + node.uuid);
        console.debug("Err: " + err);
        console.debug("Res: " + res);
    });
}

function DragEnd(node) {
    if (node.f7n) {
        SavePosition(node);
    }
    canvas_activate();
}

function canvas_activate() {
    var cnv = document.getElementById("floor_canvas");
    cnv.onmousedown = function(e) {
        document_onclick(e);
    };
    if (!mouse_tracking_active) {
        document.addEventListener('mousemove', onMouseUpdate, false);
        document.addEventListener('mouseenter', onMouseUpdate, false);
        mouse_tracking_active = true;
    }
}

function canvas_deactivate() {
    document.getElementById("floor_canvas").onmousedown = null;
};

function noop(e) {
    e.preventDefault();
}

function set_active_item_arrow() {
    // var cnv = document.getElementById("floor_canvas");
    // var cnv_rect = cnv.getBoundingClientRect();
    var node = selectedElement;
    if (node != undefined) {
        var rect = node.getBoundingClientRect();
        /* apparently with varius zooms the left/top may be fractional! */
        var X = Math.round(getMouseX() - rect.left);
        var Y = Math.round(getMouseY() - rect.top);

        set_item_arrow(node, X, Y);
        console.log("Setting arrow to: " + X + ", " + Y);
        SavePosition(node);
    }
}


var lastClipLTX = 0;
var lastClipLTY = 0;
var lastClipRBX = 0;
var lastClipRBY = 0;

function set_clip_lefttop(X, Y) {
    if (current_set_map_uuid != undefined) {
        var el = get_map_from_uuid(current_set_map_uuid);
        var cnv = document.getElementById("floor_canvas");
        var cnv_rect = cnv.getBoundingClientRect();
        el.clip_left = X;
        el.clip_top = Y;
        lastClipLTX = X;
        lastClipLTY = Y;
        console.log("Setting clip left-top: ", X, Y);
    }
}

function set_clip_rightbottom(X, Y) {
    if (current_set_map_uuid != undefined) {
        var el = get_map_from_uuid(current_set_map_uuid);
        var cnv = document.getElementById("floor_canvas");
        var cnv_rect = cnv.getBoundingClientRect();
        el.clip_width = X - el.clip_left;
        el.clip_height = Y - el.clip_top;
        lastClipRBX = X;
        lastClipRBY = Y;
        console.log("Setting clip width-height: ", el.clip_width, el.clip_height);
    }
}

function set_clip_corner_from_last() {
    if (current_set_map_uuid != undefined) {
        var el = get_map_from_uuid(current_set_map_uuid);
        set_clip_lefttop(lastClipLTX, lastClipLTY);
        set_clip_rightbottom(lastClipRBX, lastClipRBY);
        SaveMapClipArea(el);
    }
}

function set_clip_corner() {
    if (current_set_map_uuid != undefined) {
        var el = get_map_from_uuid(current_set_map_uuid);
        var cnv = document.getElementById("floor_canvas");
        var cnv_rect = cnv.getBoundingClientRect();
        var X = getMouseX() - cnv_rect.left;
        var Y = getMouseY() - cnv_rect.top;
        if (X < el.clip_left || Y < el.clip_top) {
            set_clip_lefttop(X, Y);
        } else {
            if (el.clip_width == 0 || el.clip_height == 0) {
                set_clip_rightbottom(X, Y);
            } else {
                if (X == el.clip_left && Y == el.clip_top) {
                    set_clip_lefttop(0, 0);
                    set_clip_rightbottom(0, 0);
                } else {
                    var distA = (el.clip_left - X) * (el.clip_left - X) + (el.clip_top - Y) * (el.clip_top - Y);
                    var distB = (el.clip_left + el.clip_width - X) * (el.clip_left + el.clip_width - X) + (el.clip_top + el.clip_height - Y) * (el.clip_top + el.clip_height - Y);
                    if (distA < distB) {
                        set_clip_lefttop(X, Y);
                    } else {
                        set_clip_rightbottom(X, Y);
                    }
                }
            }
        }
        SaveMapClipArea(el);
    }
}

function set_legend_position_or_shrink() {
    if (current_set_map_uuid != undefined) {
        var el = get_map_from_uuid(current_set_map_uuid);
        var cnv = document.getElementById("floor_canvas");
        var cnv_rect = cnv.getBoundingClientRect();
        var X = getMouseX() - cnv_rect.left;
        var Y = getMouseY() - cnv_rect.top;
        if (el.legend_left == X && el.legend_top == Y) {
            SaveMapLegendSize(el, el.legend_font_size - 1);
        } else {
            SaveMapLegendXY(el, X, Y);
        }
    }
}

function set_legend_grow() {
    if (current_set_map_uuid != undefined) {
        var el = get_map_from_uuid(current_set_map_uuid);
        SaveMapLegendSize(el, el.legend_font_size + 1);
    }
}

function document_onclick(e) {
    // alert(e);
    if (document.activeElement != document.body) {
        document.body.focus();
        return;
    }
    console.log("X/Y:" + e + " : " + e.clientX + " : " + e.clientY);
}

function document_keydown(e) {
    /* if there is an element with the focus, do not do anything */
    if (document.activeElement != document.body) {
        return;
    }
    if (e.getModifierState("Alt")) {
        return;
    }
    if (e.getModifierState("Control")) {
        return;
    }
    if (e.keyCode == 8) {
        // backspace
        if (confirm("Do you want to delete ?")) {
            delete_active_item();
        }
    } else if (e.keyCode == 46) {
        // delete
        if (confirm("Do you want to delete ?")) {
            delete_active_item();
        }
    } else if (e.key == 'p') {
        set_active_item_arrow();
    } else if (e.key == 'C') {
        set_clip_corner_from_last();
        set_map_svg();
    } else if (e.key == 'c') {
        set_clip_corner();
        set_map_svg();
    } else if (e.key == 'l') {
        set_legend_position_or_shrink();
    } else if (e.key == 'L') {
        set_legend_grow();
    } else if (e.key == '0') {
        if (selectedElement != undefined) {
            var node = selectedElement;
            set_item_arrow(node, 0, 0);
            SavePosition(node);
        }
    } else if (e.key == '+') {
        // plus
        adjust_item_label_size(+1);
    } else if (e.key == '-') {
        // minus
        adjust_item_label_size(-1);
    } else if (e.key == "Escape") {
        if (selectedElement != undefined) {
            setSelectedElement(undefined)
        }
    }
    console.log("Logging event: " + e.key);
}

/* beautify ignore:start */
{{#auth.groups.administrators}}
/* beautify ignore:end */

function dragElement(elmnt) {
    var pos1 = 0,
        pos2 = 0,
        pos3 = 0,
        pos4 = 0;
    if (document.getElementById(elmnt.id + "header")) {
        // if present, the header is where you move the DIV from:
        document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
    } else {
        // otherwise, move the DIV from anywhere inside the DIV:
        elmnt.onmousedown = dragMouseDown;
        elmnt.ontouchstart = handleTouchStart;
        elmnt.onclick = noop;
        document.addEventListener('touchmove', function(event) {
            if (event.scale !== 1) {
                event.preventDefault();
            }
        }, false);
    }
    elmnt.classList.add("draggable");

    function copyTouch(touch) {
        return {
            identifier: touch.identifier,
            pageX: touch.pageX,
            pageY: touch.pageY
        };
    }

    function ongoingTouchIndexById(idToFind) {
        for (var i = 0; i < ongoingTouches.length; i++) {
            var id = ongoingTouches[i].identifier;

            if (id == idToFind) {
                return i;
            }
        }
        return -1; // not found
    }

    function handleEnd(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var touches = evt.changedTouches;

        for (var i = 0; i < touches.length; i++) {
            var idx = ongoingTouchIndexById(touches[i].identifier);

            if (idx >= 0) {
                // ctx.lineTo(touches[i].pageX, touches[i].pageY);
                ongoingTouches.splice(idx, 1); // remove it; we're done
            }
        }
        // document.getElementById("new_item").value = "end touches: " + ongoingTouches.length;
        if (ongoingTouches.length == 0) {
            document.ontouchend = null;
            document.ontouchcancel = null;
            document.ontouchmove = null;
            if (elmnt.f7n && elmnt.f7n.dragging > 0) {
                DragEnd(elmnt);
            }
            console.debug("Drag end - handleEnd");
            if (elmnt.f7n) {
                elmnt.f7n.dragging = 0;
            }
        }
    }

    function handleCancel(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var touches = evt.changedTouches;

        for (var i = 0; i < touches.length; i++) {
            var idx = ongoingTouchIndexById(touches[i].identifier);
            ongoingTouches.splice(idx, 1); // remove it; we're done
        }
        document.getElementById("new_item").value = "cancel touches: " + ongoingTouches.length;
        if (elmnt.f7n && elmnt.f7n.dragging > 0) {
            DragEnd(elmnt);
        }
        console.debug("Drag end - handleCancel");
        if (elmnt.f7n) {
            elmnt.f7n.dragging = 0;
        }
    }

    function handleMove(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var touches = evt.changedTouches;
        // document.getElementById("new_item").value = "move touches: " + touches[0].pageX + " " + touches[0].pageY; 

        for (var i = 0; i < touches.length; i++) {
            var idx = ongoingTouchIndexById(touches[i].identifier);

            if (idx >= 0) {
                /* (touches[i].pageX, touches[i].pageY); */
                pos1 = pos3 - touches[i].pageX;
                pos2 = pos4 - touches[i].pageY;
                pos3 = touches[i].pageX;
                pos4 = touches[i].pageY;
                // document.getElementById("new_item").value = "touches: " + ongoingTouches.length + " " + pos1 + " " + pos2;
                // set the element's new position:
                elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
                elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
                redraw_item_arrow(elmnt);
                if (elmnt.f7n) {
                    elmnt.f7n.dragging = 1;
                }
                ongoingTouches.splice(idx, 1, copyTouch(touches[i])); // swap in the new touch record
                // document.getElementById("new_item").value = "Xove touches: " + elmnt.style.top + " " + elmnt.style.left; 
            }
        }
    }

    function handleTouchStart(e) {
        var touches = e.changedTouches;
        if (event.target.classList.contains('draggable')) {
            e.preventDefault();
        } else {
            return;
        }
        if (event.target.classList.contains('draggable') && event.target.classList.contains('item')) {
            if (selectedElement != elmnt) {
                setSelectedElement(elmnt)
            }
            if (document.activeElement != document.body) {
                document.activeElement.blur();
            }
        }

        for (var i = 0; i < touches.length; i++) {
            ongoingTouches.push(copyTouch(touches[i]));
        }
        // document.getElementById("new_item").value = "start touches: " + ongoingTouches.length;
        document.ontouchend = handleEnd;
        document.ontouchcancel = handleCancel;
        document.ontouchmove = handleMove;
        pos3 = ongoingTouches[0].PageX;
        pos4 = ongoingTouches[0].PageY;
        if (elmnt.f7n) {
            elmnt.f7n.dragging = 0;
        }

        // get the mouse cursor position at startup:
        // document.onmouseup = closeDragElement;
        // call a function whenever the cursor moves:
        // document.onmousemove = elementDrag;
    }

    function dragMouseDown(e) {
        e = e || window.event;
        if (event.target.classList.contains('draggable')) {
            console.debug("Preventdefault");
            e.preventDefault();
        } else {
            if (this.classList.contains('draggable')) {
                /* this allows to drag by the children as well */
            } else {
                console.debug("return - no prevent default");
                return true;
            }
        }
        if (event.target.classList.contains('draggable') && event.target.classList.contains('item')) {
            if (selectedElement != elmnt) {
                setSelectedElement(elmnt)
            }
            if (document.activeElement != document.body) {
                document.activeElement.blur();
            }
        }
        // get the mouse cursor position at startup:
        pos3 = e.clientX;
        pos4 = e.clientY;
        document.onmouseup = closeDragElement;
        // call a function whenever the cursor moves:
        document.onmousemove = elementDrag;
        canvas_deactivate();
        if (elmnt.f7n) {
            elmnt.f7n.dragging = 0;
        }
    }

    function elementDrag(e) {
        e = e || window.event;
        e.preventDefault();
        e.stopPropagation();
        // calculate the new cursor position:
        pos1 = pos3 - e.clientX;
        pos2 = pos4 - e.clientY;
        pos3 = e.clientX;
        pos4 = e.clientY;
        // set the element's new position:
        elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
        elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
        redraw_item_arrow(elmnt);
        if (elmnt.f7n) {
            elmnt.f7n.moved = true;
            elmnt.f7n.dragging = 1;
        }
    }

    function closeDragElement(e) {
        // stop moving when mouse button is released:
        // if (elmnt.f7n.dragging) {
        DragEnd(elmnt);
        //}
        e.stopPropagation();
        e.preventDefault();
        document.onmouseup = null;
        document.onmousemove = null;
        if (elmnt.f7n) {
            elmnt.f7n.dragging = 0;
        }
        console.debug("Drag end - closeDragElement");
    }
}
/* beautify ignore:start */
{{/auth.groups.administrators}}
/* beautify ignore:end */



function add_item_to_quicksearch(node) {
    var map_uuid = node.parent_map_uuid;
    var label = get_item_label(node);
    var map = get_map_from_uuid(map_uuid);
    if (map != null) {
        // alert(map.quickSearchObjects[node.uuid]);
        var label_plus = "|" + label + "|" + node.description + "|";
        map.quickSearchObjects[node.uuid] = label_plus;
        if (map.quickSearchString == undefined) {
            map.quickSearchString = label_plus;
        } else {
            map.quickSearchString = map.quickSearchString + label_plus;
        }
        // console.debug("Adding quick search object: " + node.uuid + " to map " + map_uuid + " as '" + label + "'");
        // console.debug("string: " + map.quickSearchString);
    } else {
        console.debug("Map is null - " + map_uuid);
    }
}

function del_item_from_quicksearch(node) {
    var map_uuid = node.parent_map_uuid;
    var map = get_map_from_uuid(map_uuid);
    if (map != null) {
        // alert(map.quickSearchObjects[node.uuid]);
        label_plus = map.quickSearchObjects[node.uuid];
        if (label_plus != null && map.quickSearchString != null) {
            map.quickSearchString = map.quickSearchString.replace(label_plus, "");
        }
        if (map.quickSearchObjects != null && map.quickSearchObjects.delete != null) {
            map.quickSearchObjects.delete(node.uuid);
        }
    }
}

function getRandomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
}

function add_new_item(input_field_id) {
    var api_url = api_root + "v1/mapobjects/new/put/json";
    var o = new Object();
    o["Name"] = document.getElementById(input_field_id).value;
    o["Description"] = "FIXME-description";
    o["MapX"] = 100;
    o["MapY"] = 30 + getRandomInt(50);
    o["LabelSize"] = defaultLabelSize;
    o["ParentMapUUID"] = current_map_uuid;
    o["TypeObjectUUID"] = defaultTypeObjectUUID;
    console.log("NEW ITEM: " + JSON.stringify(o));
    putJSON(api_url, o, function(err, d) {
        console.debug("err: " + err);
        console.debug("Made new node: " + d);
    });
}

function apply_item_style(node) {
    node.style.backgroundColor = "";
    node.style.color = "";
    node.style.border = "";
    node.style.borderRadius = "";
    node.vars = new Object();
    node.links = new Array();
    if (node.type_object_uuid != null && node.type_object_uuid != node.uuid) {
        // console.log("ITEM " + get_item_label(node) + " Apply type " + node.type_object_uuid);
        apply_item_style_from_type(node, node.type_object_uuid);
    }
    apply_item_style_from(node, node);
}

function apply_item_style_from_type(node, type_uuid) {
    var type_node = get_item_from_uuid(type_uuid);
    if (type_node == null) {
        console.log("ERROR: could not find type node for uuid " + type_uuid + " on node " + node.title + " (uuid: " + node.uuid + ")");
    } else {
        if (type_node.type_object_uuid != null && type_node.type_object_uuid != type_node.uuid) {
            apply_item_style_from_type(node, type_node.type_object_uuid);
        }
        apply_item_style_from(node, type_node);
    }
}

function apply_item_style_from(node, from_node) {
    var meta = from_node.meta;
    if (meta != null) {
        if (node.links == null) {
            node.links = new Array();
        }
        if (node.vars == null) {
            node.vars = new Object();
        }
        // console.log("Node: " + get_item_label(node) + " Applying style: " + meta);
        var i;
        var pair_strings = meta.split(";");
        for (i = 0; i < pair_strings.length; i++) {
            var pair_strings_escaped = pair_strings[i].replace(/:\/\//gi, "_//");
            var pp = pair_strings_escaped.split(":");
            for (var j = 0; j < pp.length; j++) {
                pp[j] = pp[j].replace(/_\/\//gi, "://");
            }
            // console.log(node.id + " [" + i + "] PP: " + pp[0]);
            if (pp[0] == "background-color") {
                node.style.setProperty(pp[0], pp[1], "important");
            } else if (pp[0] == "color") {
                node.style.setProperty(pp[0], pp[1], "important");
            } else if (pp[0] == "border-radius") {
                node.style.setProperty(pp[0], pp[1]);
            } else if (pp[0] == "border") {
                node.style.setProperty(pp[0], pp[1]);
            } else if (pp[0] == "labelsize") {
                set_item_labelsize(node, Math.round(pp[1]));
            } else if (pp[0] == "link") {
                if (node.links) {
                    node.links.push([pp[1], pp[2]]);
                } else {
                    alert("Node links null:" + get_item_label(node));
                }
            } else if (pp[0] == "type") {
                if (pp[1] == "type" && node == from_node) {
                    node.classList.add("type_type");
                    var dd = document.getElementById("edit_item_type");
                    if (dd != undefined) {
                        var j;
                        var found = -1;
                        for (j = 0; j < dd.length; j++) {
                            if (dd[j].value == from_node.uuid) {
                                found = j;
                            }
                        }
                        if (found == -1) {
                            var option = document.createElement("option");
                            option.text = get_item_label(from_node);
                            option.value = from_node.uuid;
                            dd.add(option);
                        } else {
                            dd[found].text = get_item_label(from_node);
                        }
                    }
                }
            }
            if (node.vars != null) {
                node.vars[pp[0]] = pp[1];
            }
        }
    }
}

var item_legend_element = null;

// this function gets data from the rows and cells 
// within an html tbody element
function table2data(tableBody) {
    const tableData = []; // create the array that'll hold the data rows
    tableBody.querySelectorAll('tr')
        .forEach(row => { // for each table row...
            const rowData = []; // make an array for that row
            rowData.push(row.querySelectorAll('td').item(0).innerText);
            rowData.push(row.outerHTML);
            tableData.push(rowData); // add the full row to the table data 
        });
    return tableData;
}

// this function puts data into an html tbody element
function data2table(tableBody, tableData) {
    tableBody.querySelectorAll('tr') // for each table row...
        .forEach((row, i) => {
            const rowData = tableData[i]; // get the array for the row data
            row.outerHTML = rowData[1];
        });
}

function sortTable(table) {
    // get the data from the table cells
    const tableBody = table.querySelector('tbody')
    const tableData = table2data(tableBody);
    // sort the extracted data
    tableData.sort((a, b) => {
        if (a[0] > b[0]) {
            return 1;
        }
        return -1;
    });
    // put the sorted data back into the table
    data2table(tableBody, tableData);
    if (tableData.length == 0) {
        table.style.display = "none";
    } else {
        table.style.display = "inline";
    }
}

function fixup_coloring() {
    if (current_set_map_uuid != undefined) {
        var el = get_map_from_uuid(current_set_map_uuid);
        var name = el.map_name;
        var el = document.getElementById("map");
        if (name.startsWith("!")) {
            el.classList.remove("grayscale-map");
            el.classList.add("color-map");
        } else {
            el.classList.remove("color-map");
            el.classList.add("grayscale-map");
        }
    }
}

function fixup_legend_table() {
    var map_legend = document.getElementById("map_legend");
    if (map_legend == null) {
        console.error("No map_legend to sort!");
        return;
    }
    sortTable(map_legend, 0);
    if (current_set_map_uuid != undefined) {
        var el = get_map_from_uuid(current_set_map_uuid);
        var cnv = document.getElementById("floor_canvas");
        var cnv_rect = cnv.getBoundingClientRect();
        map_legend.style.top = el.legend_top + "px";
        map_legend.style.left = el.legend_left + "px";

        var sz = 10 + el.legend_font_size * 2;
        map_legend.style.fontSize = sz + "px";
    }
}


function set_item_legend(node, show) {
    var map_legend = document.getElementById("map_legend");
    if (map_legend == null) {
        return;
    }
    map_legend = map_legend.querySelector('tbody')
    var tr_id = node.id + "_legend";
    var tr = document.getElementById(tr_id);
    var type_uuid = node.type_object_uuid;
    if (show && (type_uuid != null)) {
        var type_node = get_item_from_uuid(type_uuid);
        if (type_node != null) {
            var lbl = get_item_label(type_node);
            if (!lbl.startsWith("*")) {
                // need to show/update
                if (tr == null) {
                    tr = document.createElement("tr");
                    tr.id = tr_id;
                    map_legend.appendChild(tr);
                } else {
                    tr.innerHTML = "";
                }
                var td1 = document.createElement("td");
                td1.innerHTML = get_item_label(node);
                var td2 = document.createElement("td");
                td2.innerHTML = lbl;
                var td3 = document.createElement("td");
                td3.innerHTML = node.description;
                tr.appendChild(td1);
                tr.appendChild(td2);
                tr.appendChild(td3);
                apply_item_style_from_type(td1, node.type_object_uuid);
            }
        }
    } else {
        if (tr != null) {
            // need to delete
            tr.outerHTML = "";
        }
    }
}

function set_item_visibility(node) {
    var visible = (node.parent_map_uuid == current_map_uuid)
    if (visible) {
        // node.style.visibility = "visible";
        node.style.display = "";
        var lbl = node.childNodes[0];

        if (lbl != null) {
            var label_plus = lbl.data;
            var map = get_map_from_uuid(node.parent_map_uuid);
            if (map != null) {
                label_plus = map.quickSearchObjects[node.uuid];
            }
            if ((current_quick_search != "") && TextHasText(label_plus, current_quick_search)) {
                node.style["font-weight"] = 'bold';
                node.style.zIndex = 20;
            } else {
                node.style["font-weight"] = 'normal';
                node.style.zIndex = 10;
            }
        }
        // apply_item_style(node);
    } else {
        // node.style.visibility = "hidden";
        node.style.display = "none";
        node.style.zIndex = 10;
    }
    set_item_legend(node, visible)
    redraw_item_arrow(node);
}

function del_item_accessories(node) {
    var arrow_id = node.id + "_svg";
    var arrow = document.getElementById(arrow_id);
    arrow.outerHTML = "";
    set_item_legend(node, false);
}

function redraw_item_arrow(node) {
    set_item_arrow(node, node.arrow_x, node.arrow_y);
}

function set_item_arrow(node, x, y) {
    if (x == undefined) {
        x = 0;
    }
    if (y == undefined) {
        y = 0;
    }
    var arrow_id = node.id + "_svg";
    var arrow = document.getElementById(arrow_id);
    var rect = node.getBoundingClientRect();
    var cnv = document.getElementById("floor_canvas");
    var cnv_rect = cnv.getBoundingClientRect();
    var tx = Math.round(rect.left - cnv_rect.left);
    var ty = Math.round(rect.top - cnv_rect.top);
    var dx = Math.round(rect.width / 2);
    var dy = Math.round(rect.height / 2);

    if (arrow != null) {
        // arrow.style.visibility = node.style.visibility;
        arrow.style.display = node.style.display;
        arrow.innerHTML = '<svg  style="position:absolute; left:' + (tx + dx) + 'px;top:' + (ty + dy) + 'px; width:auto; height:auto; overflow:visible;">' +
            '<path   d="M 0 0 L ' + (x - dx) + ' ' + (y - dy) + '" fill="none" stroke="#f00"></path>' +
            '<circle cx="' + (x - dx) + '" cy="' + (y - dy) + '" r="3" fill="#f00" stroke="none"></circle></svg>';
        // console.log(arrow.outerHTML);
        if (x == 0 && y == 0) {
            // arrow.style.visibility = 'hidden';
            arrow.style.display = 'none';
        }
    }
    node.arrow_x = x;
    node.arrow_y = y;
}



function upload_item_file() {
    var file_upload = document.getElementById("item_file_upload");
    var file = file_upload.value;

    var xhr = new XMLHttpRequest();
    xhr.addEventListener('progress', function(e) {
        var done = e.position || e.loaded,
            total = e.totalSize || e.total;
        console.log('xhr progress: ' + (Math.floor(done / total * 1000) / 10) + '%');
    }, false);
    if (xhr.upload) {
        xhr.upload.onprogress = function(e) {
            var prog = document.getElementById("file_upload_progress");
            var done = e.position || e.loaded,
                total = e.totalSize || e.total;
            console.log('xhr.upload progress: ' + done + ' / ' + total + ' = ' + (Math.floor(done / total * 1000) / 10) + '%');
            prog.innerHTML = 'xhr.upload progress: ' + done + ' / ' + total + ' = ' + (Math.floor(done / total * 1000) / 10) + '%';
        };
    }
    xhr.onreadystatechange = function(e) {
        if (4 == this.readyState) {
            console.log(['xhr upload complete', e]);
            console.log(this.status);
            console.log(this.response);
        }
    };
    xhr.open('POST', "/fileupload", true);
    // xhr.setRequestHeader("Content-Type","multipart/form-data");
    var form = document.getElementById("file_upload_form");
    var formData = new FormData(form);
    xhr.send(formData);
}

function upload_to_html(jse) {
    var node = document.createElement("p");
    node.classList.add("upload-item");
    var upload_info = jse["CreatedAt"] + " " + jse["CreatedBy"];
    node.innerHTML = upload_info + " <a target='_new' href='/uploaded-files/" + jse["ServerFileName"] + "'>" + jse["OriginalFileName"] + "</a> " + jse["Message"];
    return node;
}

function update_upload_from_jse(jse) {
    var modal = document.getElementById("myModal");
    var old_jse = uploads[jse["UploadUUID"]];
    uploads[jse["UploadUUID"]] = jse;
    console.log(["Update upload:", jse]);
    if (modal != null && modal.style.display == "block") {
        var upload_for = document.getElementById("upload_for");
        if (upload_for.value == jse["RelatedToUUID"]) {
            var modal_inner = document.getElementById("modal_inner");
            var elt = upload_to_html(jse);
            modal_inner.parentNode.appendChild(elt);
        }
    }
}

function append_uploads_for(uuid) {
    var modal_inner = document.getElementById("modal_inner");
    for (var upload_uuid in uploads) {

        var u = uploads[upload_uuid];
        console.log(["check upload:", u]);
        if (u["RelatedToUUID"] == uuid) {
            var elt = upload_to_html(u);
            modal_inner.parentNode.appendChild(elt);
        }
    }
}


function link_to_html(node, link) {
    var new_node = document.createElement("p");
    new_node.classList.add("upload-item");

    var link_href = link[1].replace(/[{][{]([^}]+)[}][}]/g,
        function(a, b) {
            var ret = "uNknOwn";
            if (node.vars) {
                ret = node.vars[b];
            }
            return ret;
        });
    var link_title = link[0];
    new_node.innerHTML = "<a target='_new' href='" + link_href + "'>" + link_title + "</a>";
    return new_node;
}

function append_node_links(node) {
    var modal_inner = document.getElementById("modal_inner");
    for (var i = 0; i < node.links.length; i++) {
        var link = node.links[i];
        var elt = link_to_html(node, link);
        modal_inner.parentNode.appendChild(elt);
    }
}

function user_has_clicked(node) {
    var modal = document.getElementById("myModal");
    var span = document.getElementsByClassName("close")[0];
    span.onclick = function() {
        modal.style.display = "none";
        var file_upload = document.getElementById("item_file_upload");
        file_upload.value = "";
        var upload_for = document.getElementById("upload_for");
        upload_for.value = "";
        var elts = modal.getElementsByClassName("upload-item");
        while (elts[0]) {
            elts[0].parentNode.removeChild(elts[0]);
        }

    }
    var upload_for = document.getElementById("upload_for");
    upload_for.value = node.uuid;

    var label = get_item_label(node);

    modal.style.display = "block";
    var modal_inner = document.getElementById("modal_inner");
    modal_inner.innerHTML = "<p>" + label + ": " + node.description + "</p>";

    append_node_links(node);
    append_uploads_for(node.uuid);

    var file_upload = document.getElementById("item_file_upload");
    file_upload.onchange = function(e) {
        upload_item_file();
    }

}

function add_item_jso(jso) {
    var cnv = document.getElementById("floor_canvas");
    var node = document.createElement("div");
    node.classList.add("item");
    if (jso["Locked"]) {
        node.classList.add("locked");
    }
    node.classList.add("sw0");
    node.style.top = jso["MapY"] + "px";
    node.style.left = jso["MapX"] + "px";
    var el_id = get_item_id(jso);
    node.id = el_id;
    node.f7n = {};
    node.f7n.dragging = 0;
    node.f7n.saving = 0;
    node.uuid = jso["MapObjectUUID"];
    node.type_object_uuid = jso["TypeObjectUUID"];
    node.parent_map_uuid = jso["ParentMapUUID"];
    node.labelsize = jso["LabelSize"];
    node.description = jso["Description"];
    node.meta = jso["Meta"];

    var label = jso["Name"];
    var textnode = document.createTextNode(label);
    textnode.id = el_id + "_label";
    node.appendChild(textnode);
    var baggage = document.createElement("div");
    // baggage.innerHTML = "<img src='static/layer_3_switch.png'></img>";
    baggage.innerHTML = "Attention";
    // baggage.style.position = "absolute";
    // baggage.style.top = "15px";
    // baggage.style.left = "0px";
    baggage.style.background = "red";
    // node.appendChild(baggage);
    var arrow = document.createElement("span");
    arrow.id = el_id + "_svg";
    arrow.style = "z-index: -10;"
    cnv.appendChild(arrow);
    set_item_visibility(node);
    set_item_labelsize(node, node.labelsize);
    add_item_to_quicksearch(node);
    // console.debug("Add item " + node.uuid + " parent map " + node.parent_map_uuid);
    cnv.appendChild(node);
    set_item_arrow(node, jso["ArrowX"], jso["ArrowY"]);

    /* beautify ignore:start */
{{#auth.groups.administrators}}
    dragElement(node);
    node.ondblclick = function(e) { user_has_clicked(node); };
{{/auth.groups.administrators}}
{{^auth.groups.administrators}}
    node.onclick = function(e) { user_has_clicked(node); };
{{/auth.groups.administrators}}
/* beautify ignore:end */
    if (!initial_page_loading) {
        fixup_legend_table();
    }

}

function set_item_label(node, label) {
    console.debug("Setting item label to " + label);
    del_item_from_quicksearch(node);
    node.replaceChild(document.createTextNode(label), node.childNodes[0]);
    if (node.vars != null) {
        node.vars["label"] = label;
    }
    add_item_to_quicksearch(node);
}

function set_item_labelsize(node, labelsize) {
    // console.debug("Setting item label size to " + labelsize);
    node.labelsize = labelsize;
    var sz = 10 + labelsize * 2;
    node.style.fontSize = sz + "px";
}

function get_item_label(node) {
    var label = node.childNodes[0].nodeValue;
    console.debug("Node label: " + label);
    return (label);
}

function get_item_description(node) {
    var desc = node.description || "";
    return desc;
}

function get_item_meta(node) {
    var meta = node.meta || "";
    return meta;
}

function set_item_description(node, txt) {
    del_item_from_quicksearch(node);
    node.description = txt;
    add_item_to_quicksearch(node);
}

function set_item_meta(node, txt) {
    node.meta = txt;
}

function set_item_meta(node, txt) {
    node.meta = txt;
    apply_item_style(node);
}

function update_item_jso(node, jso) {
    var cnv = document.getElementById("floor_canvas");
    console.debug("Updating " + node.uuid + " X: " + jso["MapX"] + " Y: " + jso["MapY"]);
    if (jso["Deleted"]) {
        del_item_from_quicksearch(node);
        del_item_accessories(node);
        node.outerHTML = "";
    } else {
        if (node.f7n.dragging + node.f7n.saving == 0) {
            node.style.top = jso["MapY"] + "px";
            node.style.left = jso["MapX"] + "px";
        }
        var label = jso["Name"];
        set_item_label(node, label);
        node.type_object_uuid = jso["TypeObjectUUID"];
        set_item_description(node, jso["Description"]);
        set_item_meta(node, jso["Meta"]);
        set_item_labelsize(node, jso["LabelSize"]);
        node.parent_map_uuid = jso["ParentMapUUID"];
        set_item_visibility(node);
        apply_item_style(node);
        if (jso["Locked"]) {
            node.classList.add("locked");
        } else {
            node.classList.remove("locked");
        }
        set_item_arrow(node, jso["ArrowX"], jso["ArrowY"]);
        if (selectedElement == node) {
            load_item_details(node);
        }
    }
}

function set_map_label(node, label) {
    node.getElementsByTagName("P")[0].innerHTML = label;
}

function get_map_label(node) {
    var label = node.getElementsByTagName("P")[0].innerHTML;
    return label;
}

function select_next_mapX(curr_map_uuid, set_curr_map, node) {
    if (node.uuid == curr_map_uuid) {
        for (var next_li_node = node.parentNode.nextSibling; next_li_node != null; next_li_node = next_li_node.nextSibling) {
            if (next_li_node.nodeName == "LI") {
                var next_node = next_li_node.childNodes[0];
                if (next_node != null && next_node.style.display != "none") {
                    set_curr_map(next_node.uuid);
                    break;
                }
                if (next_node == null) {
                    break;
                }
            }
        }
        if (next_li_node == null) {
            set_curr_map(undefined);
        }
    }
}

function map_node_update(node, jso) {
    var label = jso["Name"];
    set_map_label(node, label);
    node.clip_top = jso["ClipTop"];
    node.clip_left = jso["ClipLeft"];
    node.clip_width = jso["ClipWidth"];
    node.clip_height = jso["ClipHeight"];
    node.file_version = jso["FileVersion"];
    node.legend_top = jso["LegendTop"];
    node.legend_left = jso["LegendLeft"];
    node.legend_font_size = jso["LegendFontSize"];
}

function reinsert_node(canvas_id, node) {
    var cnv = document.getElementById(canvas_id);
    var li_node = node.parentNode;
    li_node.parentNode.removeChild(li_node);
    insert_map_li_node(cnv, li_node);
}

function update_map_jso(node, jso) {
    if (jso["Deleted"]) {
        select_next_mapX(current_map_uuid, set_current_map, node);
        node.outerHTML = "";
        console.debug("Deleting map " + node.uuid);
    } else {
        console.debug("Updating map " + node.uuid + " : " + jso["Deleted"]);
        var old_file_version = node.file_version;
        map_node_update(node, jso);
        if (old_file_version != node.file_version) {
            refresh_map_images(node);
        }
        node.map_name = jso["Name"];
        if (node.uuid == current_map_uuid) {
            node.classList.add("selected-thumbnail");
            fixup_legend_table();
            fixup_coloring();
        }
        if (node.sort_order != jso["SortOrder"]) {
            node.sort_order = jso["SortOrder"];
            reinsert_node("page_thumbnails", node);
        }
        set_map_svg();
    }
}

function update_map2_jso(node, jso) {
    if (jso["Deleted"]) {
        select_next_mapX(current_map2_uuid, set_current_map2, node);
        node.outerHTML = "";
        console.debug("Deleting map2 " + node.uuid);
    } else {
        console.debug("Updating map2 " + node.uuid + " : " + jso["Deleted"]);
        var old_file_version = node.file_version;
        map_node_update(node, jso);
        if (old_file_version != node.file_version) {
            refresh_map2_images(node);
        }
        if (node.sort_order != jso["SortOrder"]) {
            node.sort_order = jso["SortOrder"];
            reinsert_node("page_thumbnails2", node);
        }
        if (node.uuid == current_map2_uuid) {
            node.classList.add("selected-thumbnail");
        }
    }
}

function refresh_map_images(node) {
    var node_thumb_img = document.getElementById(node.id + "_thumbnail");
    node_thumb_img.src = get_floormap_thumbnail_src(node.uuid);
    if (node.uuid == current_map_uuid) {
        var el = document.getElementById("map");
        el.src = get_floormap_src(node.uuid);
        draw_compare_map2();
    }
}

function refresh_map2_images(node) {
    var node_thumb_img = document.getElementById(node.id + "_thumbnail");
    node_thumb_img.src = get_floormap_thumbnail_src(node.uuid);
    if (node.uuid == current_map_uuid) {
        var el = document.getElementById("map2");
        el.src = get_floormap_src(node.uuid);
    }
}

function create_map_node_from_jso(id_prefix, jso) {
    var node = document.createElement("div");
    var el_id = id_prefix + get_map_id(jso);
    node.id = el_id;
    // node.f7n = {};
    node.uuid = jso["FloorMapUUID"];
    node.parent_uuid = jso["ParentFloorPlanUUID"];
    node.clip_top = jso["ClipTop"];
    node.clip_left = jso["ClipLeft"];
    node.clip_width = jso["ClipWidth"];
    node.clip_height = jso["ClipHeight"];
    node.file_version = jso["FileVersion"];
    node.legend_top = jso["LegendTop"];
    node.legend_left = jso["LegendLeft"];
    node.legend_font_size = jso["LegendFontSize"];
    node.sort_order = jso["SortOrder"];
    var label = jso["Name"];

    var node_label = document.createElement("p");

    var textnode = document.createTextNode(label);
    node_label.appendChild(textnode);
    var node_img = document.createElement("img");
    node_img.classList.add("thumbnail-image");
    node_img.id = el_id + "_thumbnail";
    node_img.src = get_floormap_thumbnail_src_version(node.uuid, node.file_version);
    node_img.title = jso["Description"];


    node.quickSearchObjects = {};
    node.quickSearchString = "";
    node.appendChild(node_label);
    node.appendChild(node_img);
    if (node.uuid == current_map_uuid) {
        node.classList.add("selected-thumbnail");
    }
    return node;
}

function cache_full_image(node) {
    var node_full_img = new Image();
    var img_src = get_floormap_src(node.uuid);
    console.log("Pushing cache: " + img_src);
    node_full_img.src = img_src;
    page_images_cache.push(node_full_img);
}

function insert_map_li_node(cnv, li_node) {
    var insertBeforeNode = null;
    var node = li_node.childNodes[0];
    for (var i = 0; i < cnv.childNodes.length; i++) {
        var lin = cnv.childNodes[i];
        if (lin.nodeName == "LI" && lin.childNodes.length == 1) {
            var anode = lin.childNodes[0];
            if (anode.sort_order != undefined) {
                if (anode.sort_order > node.sort_order) {
                    insertBeforeNode = lin;
                    break;
                }
            }
        }

    }
    if (insertBeforeNode == null) {
        cnv.appendChild(li_node);
    } else {
        cnv.insertBefore(li_node, insertBeforeNode);
    }
}

function set_map_visibility(curr_floorplan_uuid, node) {
    if (curr_floorplan_uuid != undefined) {
        if (curr_floorplan_uuid == node.parent_uuid) {
            node.style.display = "";
        } else {
            node.style.display = "none";
        }
    } else {
        node.style.display = "none";
    }
}

function add_map_jso(jso) {
    /*
     <li><div id='page_1'><p>Page 1</p><img class="thumbnail-image" src="static/out-21.ppm.png"></div></li>
    */
    var cnv = document.getElementById("page_thumbnails");
    var li_node = document.createElement("li");
    var node = create_map_node_from_jso("", jso);
    node.classList.add("map1_floormap");
    node.map_name = jso["Name"];

    li_node.appendChild(node);
    node.onclick =
        function(e) {
            set_current_map(node.uuid);
        };
    /* beautify ignore:start */
{{#auth.groups.administrators}}
/* beautify ignore:end */
    node.ondblclick = function(e) {
        var label = get_map_label(node);
        var new_name = prompt("Rename " + label, label);
        if (new_name != null) {
            set_map_label(node, new_name);
            SaveMapName(node);
        }
    };
    /* beautify ignore:start */
{{/auth.groups.administrators}}
/* beautify ignore:end */
    console.debug("Adding map " + node.uuid);
    set_map_visibility(current_floorplan_uuid, node);
    li_node.child_uuid = node.uuid;
    insert_map_li_node(cnv, li_node);
    cache_full_image(node);
}

function add_map2_jso(jso) {
    /*
     <li><div id='page_1'><p>Page 1</p><img class="thumbnail-image" src="static/out-21.ppm.png"></div></li>
    */
    var cnv = document.getElementById("page_thumbnails2");
    if (cnv == null) {
        return;
    }
    var li_node = document.createElement("li");
    var node = create_map_node_from_jso("map2_", jso);
    node.classList.add("map2_floormap");

    li_node.appendChild(node);
    node.onclick =
        function(e) {
            set_current_map2(node.uuid);
        };
    // console.debug("Adding map " + node.uuid);
    set_map_visibility(current_floorplan2_uuid, node);
    insert_map_li_node(cnv, li_node);
    cache_full_image(node);
}

function set_current_floorplan(uuid) {
    var elts = document.getElementsByClassName("map1_floormap");
    current_floorplan_uuid = uuid;
    for (var i = 0; i < elts.length; i++) {
        set_map_visibility(current_floorplan_uuid, elts[i]);
    }
}

function set_current_floorplan2(uuid) {
    var elts = document.getElementsByClassName("map2_floormap");
    current_floorplan2_uuid = uuid;
    for (var i = 0; i < elts.length; i++) {
        set_map_visibility(current_floorplan2_uuid, elts[i]);
    }
}

function HasText(el, q) {
    var haystack = el.innerHTML;
    var haystack_lower = haystack.toLowerCase();
    var q_lower = q.toLowerCase();
    if (q == q_lower) {
        return (haystack_lower.indexOf(q_lower) !== -1);
    } else {
        return (haystack.indexOf(q) !== -1);
    }

    return found;
}

function TextHasText(text, q) {
    var haystack = text;
    var haystack_lower = haystack.toLowerCase();
    var q_lower = q.toLowerCase();
    if (q == q_lower) {
        return (haystack_lower.indexOf(q_lower) !== -1);
    } else {
        return (haystack.indexOf(q) !== -1);
    }

    return found;
}

function PerformQuickSearch(q) {
    current_quick_search = q;
    var t = document.getElementById('page_thumbnails'); // .childNodes[1];
    // console.log("Value: ", q);
    // console.log("child node count: ", t.childNodes.length);
    for (var i = 2; i < t.childNodes.length; i++) {
        // console.log("Child ", i, " : ", t.childNodes[i].nodeName);
        var el = t.childNodes[i];
        // console.log("node: ", el); console.log("disp: ", el.style.display);
        if (el.nodeName == "LI") {
            var found = false;
            if (HasText(el.childNodes[0].childNodes[0], q)) {
                found = true;
            } else if (TextHasText(el.childNodes[0].quickSearchString, q)) {
                found = true;
            } else {
                var mimg = el.childNodes[0].childNodes[1];
                if (mimg != undefined && mimg.nodeName == "IMG") {
                    var txt = mimg.getAttribute("title");
                    if (TextHasText(txt, q)) {
                        found = true;
                    }
                }
            }
            console.debug(el.childNodes[0].quickSearchString);
            if (found) {
                // el.style.visibility = "visible";
                el.style.display = "";
            } else {
                // el.style.visibility = "hidden";
                el.style.display = "none";
            }
        }
    }

    var el = get_map_from_uuid(current_map_uuid);
    if (el != null) {
        el.scrollIntoView();
    }
    var searchscreen = document.getElementById("searchscreen");
    if (q == "") {
        searchscreen.style.display = "none";
    } else {
        searchscreen.style.display = "block";
    }
    set_map_items_visibility();
}

function QuickSearchHandler(e) {
    // console.log("keyup event detected! coming from this element:", e.target);
    var q = e.target.value;
    PerformQuickSearch(q);
}

function ClearQuickSearch() {
    var el = document.getElementById("quickSearch");
    el.value = "";
    PerformQuickSearch("");
    return false;
}