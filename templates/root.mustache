<!--
/* beautify ignore:start */
-->
<!doctype html>
	

<html lang="en">
	<head>
<style>

.img-overlay-wrap {
  position: relative;
  display: inline-block; /* <= shrinks container to image size */
}

.img-overlay-wrap img.map { /* <= optional, for responsiveness */
   display: block;
   width: 1000px;
   /* max-width: 100%; */
   height: auto; */
}

.img-overlay-wrap svg {
  position: absolute;
  top: 0;
  left: 0;
}

.img-overlay-wrap .item {
  color: white;
  position: absolute;
  background-color: green;
  cursor: move;
  z-index: 10;
  font-size: 8px;
  cursor: pointer;
}

div.sw1 {
  border: solid 1px #c00;
}

div.sw0 {
  border: solid 1px green;
}

.draggable 
    {
         cursor: pointer;
    }

.img-overlay-wrap div.panel {
  font-size: 8px;
  position: absolute;
  top: 0px;
  left: 50px;
  /* height: 200px; */
  background-color: #ccc;
  border: solid 3px;
  cursor: pointer;
  white-space:nowrap;
}

  div.panel div.hidden_pane {
	  display: none;
  }

</style>
	<script>
// -->
/* beautify ignore:end */

var selectedElement = undefined;
var ongoingTouches = [];

function load_item_details(el) {
    var txt = document.getElementById("edit_item_txt");
    txt.value = el.innerText;
}

function save_item_details() {
    var txt = document.getElementById("edit_item_txt");
    selectedElement.innerText = txt.value;
}

function setSelectedElement(elmnt) {
    if (selectedElement != undefined) {
        selectedElement.classList.remove("sw1");
        selectedElement.classList.add("sw0");
    }
    if (elmnt != undefined) {
        elmnt.classList.remove("sw0");
        elmnt.classList.add("sw1");
        selectedElement = elmnt;
        load_item_details(elmnt);
        document.getElementById("new_item_details").classList.add("hidden_pane");
        document.getElementById("existing_item_details").classList.remove("hidden_pane");
    } else {
        if (selectedElement != undefined) {
            document.getElementById("existing_item_details").classList.add("hidden_pane");
            document.getElementById("new_item_details").classList.remove("hidden_pane");
            selectedElement = undefined;
        }
    }
}

function getJSON(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'json';
    xhr.onload = function() {
        var status = xhr.status;
        if (status === 200) {
            callback(null, xhr.response);
        } else {
            callback(status, xhr.response);
        }
    };
    xhr.send();
}

function putJSON(url, data, callback) {
    var json = JSON.stringify(data);
    var xhr = new XMLHttpRequest();
    xhr.open('PUT', url, true);
    xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
    xhr.responseType = 'json';
    xhr.onload = function() {
        var status = xhr.status;
        if (status === 200) {
            callback(null, xhr.response);
        } else {
            callback(status, xhr.response);
        }
    };
    xhr.send(json);
}

function get_item_id(jse) {
    var el_id = "item_" + jse["MapObjectUUID"].replace(/-/gi, "_");
    return el_id;
}

function processJSON(err, data) {
    if (err !== null) {
        alert('Something went wrong: ' + err);
    } else {
        // alert('Your data: ' + data.length);
        for (var i = 0; i < data.length; i++) {
            var jse = data[i];
            var el_id = get_item_id(jse);
            var el = document.getElementById(el_id);
            if (el != null) {
                update_item_jso(el, jse)
            } else {
                if (!jse["Deleted"]) {
                    add_item_jso(jse)
                }
            }
        }
        setTimeout(JsonPollCycle, 1000);
    }
}

var api_root = "/api/";

function JsonPollCycle() {
    var api_url = api_root + "v1/mapobjects/get/json";
    getJSON(api_url, processJSON);
}

function check_save(data) {}

function SavePosition(node) {
    var api_url = api_root + "v1/mapobjects/xy/put/json";
    var cnv = document.getElementById("floor_canvas");
    var cnv_rect = cnv.getBoundingClientRect();
    var rect = node.getBoundingClientRect();
    var data = new Object();
    /* apparently with varoius zooms the left/top may be fractional! */
    var MapX = Math.round(rect.left - cnv_rect.left);
    var MapY = Math.round(rect.top - cnv_rect.top);
    console.debug("Maybe Saving position: " + node.uuid + " X: " + MapX + " Y: " + MapY);
    console.debug("rect X: " + rect.left + " Y: " + rect.top + " cnv X: " + cnv_rect.left + " Y: " + cnv_rect.top);
    if (rect.left < cnv_rect.left) {
        console.warn("Rect left " + rect.left + " < cnv rect left " + cnv_rect.left);
        return;
    }
    if (rect.top < cnv_rect.top) {
        console.warn("Rect top " + rect.top + " < cnv rect top " + cnv_rect.top);
        return;
    }
    data["MapX"] = MapX;
    data["MapY"] = MapY;
    data["MapObjectUUID"] = node.uuid;
    var arr = new Array();
    arr[0] = data;
    node.f7n.saving++;
    console.debug("Saving position: " + node.uuid + " X: " + MapX + " Y: " + MapY);
    putJSON(api_url, arr, function() {
        node.f7n.saving--;
        console.debug("Saved for " + node.uuid);
    });
}

function DragEnd(node) {
    if (node.f7n) {
        SavePosition(node);
    }
}

function noop(e) {
    e.preventDefault();
}

function dragElement(elmnt) {
    var pos1 = 0,
        pos2 = 0,
        pos3 = 0,
        pos4 = 0;
    if (document.getElementById(elmnt.id + "header")) {
        // if present, the header is where you move the DIV from:
        document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
    } else {
        // otherwise, move the DIV from anywhere inside the DIV:
        elmnt.onmousedown = dragMouseDown;
        elmnt.ontouchstart = handleTouchStart;
        elmnt.onclick = noop;
        document.addEventListener('touchmove', function(event) {
            if (event.scale !== 1) {
                event.preventDefault();
            }
        }, false);
    }
    elmnt.classList.add("draggable");

    function copyTouch(touch) {
        return {
            identifier: touch.identifier,
            pageX: touch.pageX,
            pageY: touch.pageY
        };
    }

    function ongoingTouchIndexById(idToFind) {
        for (var i = 0; i < ongoingTouches.length; i++) {
            var id = ongoingTouches[i].identifier;

            if (id == idToFind) {
                return i;
            }
        }
        return -1; // not found
    }

    function handleEnd(evt) {
        evt.preventDefault();
        var touches = evt.changedTouches;

        for (var i = 0; i < touches.length; i++) {
            var idx = ongoingTouchIndexById(touches[i].identifier);

            if (idx >= 0) {
                // ctx.lineTo(touches[i].pageX, touches[i].pageY);
                ongoingTouches.splice(idx, 1); // remove it; we're done
            }
        }
        // document.getElementById("new_item").value = "end touches: " + ongoingTouches.length;
        if (ongoingTouches.length == 0) {
            document.ontouchend = null;
            document.ontouchcancel = null;
            document.ontouchmove = null;
            if (elmnt.f7n && elmnt.f7n.dragging > 0) {
                DragEnd(elmnt);
            }
            console.debug("Drag end - handleEnd");
            if (elmnt.f7n) {
                elmnt.f7n.dragging = 0;
            }
        }
    }

    function handleCancel(evt) {
        evt.preventDefault();
        var touches = evt.changedTouches;

        for (var i = 0; i < touches.length; i++) {
            var idx = ongoingTouchIndexById(touches[i].identifier);
            ongoingTouches.splice(idx, 1); // remove it; we're done
        }
        document.getElementById("new_item").value = "cancel touches: " + ongoingTouches.length;
        if (elmnt.f7n && elmnt.f7n.dragging > 0) {
            DragEnd(elmnt);
        }
        console.debug("Drag end - handleCancel");
        if (elmnt.f7n) {
            elmnt.f7n.dragging = 0;
        }
    }

    function handleMove(evt) {
        evt.preventDefault();
        var touches = evt.changedTouches;
        // document.getElementById("new_item").value = "move touches: " + touches[0].pageX + " " + touches[0].pageY; 

        for (var i = 0; i < touches.length; i++) {
            var idx = ongoingTouchIndexById(touches[i].identifier);

            if (idx >= 0) {
                /* (touches[i].pageX, touches[i].pageY); */
                pos1 = pos3 - touches[i].pageX;
                pos2 = pos4 - touches[i].pageY;
                pos3 = touches[i].pageX;
                pos4 = touches[i].pageY;
                // document.getElementById("new_item").value = "touches: " + ongoingTouches.length + " " + pos1 + " " + pos2;
                // set the element's new position:
                elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
                elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
                if (elmnt.f7n) {
                    elmnt.f7n.dragging = 1;
                }
                ongoingTouches.splice(idx, 1, copyTouch(touches[i])); // swap in the new touch record
                // document.getElementById("new_item").value = "Xove touches: " + elmnt.style.top + " " + elmnt.style.left; 
            }
        }
    }

    function handleTouchStart(e) {
        var touches = e.changedTouches;
        if (event.target.classList.contains('draggable')) {
            e.preventDefault();
        } else {
            return;
        }
        if (event.target.classList.contains('draggable') && event.target.classList.contains('item')) {
            if (selectedElement != elmnt) {
                setSelectedElement(elmnt)
            } else {
                setSelectedElement(undefined)
            }
        }

        for (var i = 0; i < touches.length; i++) {
            ongoingTouches.push(copyTouch(touches[i]));
        }
        // document.getElementById("new_item").value = "start touches: " + ongoingTouches.length;
        document.ontouchend = handleEnd;
        document.ontouchcancel = handleCancel;
        document.ontouchmove = handleMove;
        pos3 = ongoingTouches[0].PageX;
        pos4 = ongoingTouches[0].PageY;
        if (elmnt.f7n) {
            elmnt.f7n.dragging = 0;
        }

        // get the mouse cursor position at startup:
        // document.onmouseup = closeDragElement;
        // call a function whenever the cursor moves:
        // document.onmousemove = elementDrag;
    }

    function dragMouseDown(e) {
        e = e || window.event;
        if (event.target.classList.contains('draggable')) {
            e.preventDefault();
        } else {
            return;
        }
        if (event.target.classList.contains('draggable') && event.target.classList.contains('item')) {
            if (selectedElement != elmnt) {
                setSelectedElement(elmnt)
            } else {
                setSelectedElement(undefined)
            }
        }
        // get the mouse cursor position at startup:
        pos3 = e.clientX;
        pos4 = e.clientY;
        document.onmouseup = closeDragElement;
        // call a function whenever the cursor moves:
        document.onmousemove = elementDrag;
        if (elmnt.f7n) {
            elmnt.f7n.dragging = 0;
        }
    }

    function elementDrag(e) {
        e = e || window.event;
        e.preventDefault();
        // calculate the new cursor position:
        pos1 = pos3 - e.clientX;
        pos2 = pos4 - e.clientY;
        pos3 = e.clientX;
        pos4 = e.clientY;
        // set the element's new position:
        elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
        elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
        if (elmnt.f7n) {
            elmnt.f7n.moved = true;
            elmnt.f7n.dragging = 1;
        }
    }

    function closeDragElement() {
        // stop moving when mouse button is released:
        // if (elmnt.f7n.dragging) {
        DragEnd(elmnt);
        //}
        document.onmouseup = null;
        document.onmousemove = null;
        if (elmnt.f7n) {
            elmnt.f7n.dragging = 0;
        }
        console.debug("Drag end - closeDragElement");
    }
}


var next_y = 40;
var next_number = 3;

function add_item(e) {
    var cnv = document.getElementById("floor_canvas");
    var node = document.createElement("div");
    node.classList.add("item")
    node.classList.add("sw0");
    node.style.top = next_y + "px";
    node.id = "sw_" + next_number;
    node.f7n = {};
    node.f7n.dragging = 0;
    node.f7n.saving = 0;
    next_number = next_number + 1;
    var label = document.getElementById("new_item").value;
    var textnode = document.createTextNode(label);
    node.appendChild(textnode);
    cnv.appendChild(node);
    next_y = next_y + 20;
    dragElement(node)
    document.getElementById("new_item").value = "new_item_" + next_number;
}

function add_item_jso(jso) {
    var cnv = document.getElementById("floor_canvas");
    var node = document.createElement("div");
    node.classList.add("item")
    node.classList.add("sw0");
    node.style.top = jso["MapY"] + "px";
    node.style.left = jso["MapX"] + "px";
    var el_id = get_item_id(jso);
    node.id = el_id;
    node.f7n = {};
    node.f7n.dragging = 0;
    node.f7n.saving = 0;
    node.uuid = jso["MapObjectUUID"];
    var label = jso["Name"];
    var textnode = document.createTextNode(label);
    textnode.id = el_id + "_label";
    node.appendChild(textnode);
    cnv.appendChild(node);
    dragElement(node)
}

function update_item_jso(node, jso) {
    var cnv = document.getElementById("floor_canvas");
    console.debug("Updating " + node.uuid + " X: " + jso["MapX"] + " Y: " + jso["MapY"]);
    if (jso["Deleted"]) {
        node.outerHTML = "";
    } else {
        if (node.f7n.dragging + node.f7n.saving == 0) {
            node.style.top = jso["MapY"] + "px";
            node.style.left = jso["MapX"] + "px";
        }
        var label = jso["Name"];
        node.innerText = label;
    }
}
/* beautify ignore:start */

	</script>
	</head>
	<body>
		<input id="start_poll" type="button" value="start_poll"/>
		<div class="img-overlay-wrap" id="floor_canvas">
		  <img class="map" src="out-21.ppm.png"/>
		  <!--
		  <div id="sw_0" class="item" style="top: 0px; left: 0px">c3750-1</div>
		  <div id="sw_1" class="item" style="top: 20px; left: 0px">S0052</div>
		  -->
		  <div id="control_panel" class="panel">
		  	  <div id="new_item_details">
				  <div class="draggable">Add new draggable item</div>
			          <input id="new_item" type="text" value="New Item" class="textedit"/>
			  	  <input id="new_item_add" type="button" value="add"/>
		  	  </div>
			  <div id="existing_item_details" class="hidden_pane">
				  <div class="draggable">Edit details</div>
			          <input id="edit_item_txt" type="text" value="" class="textedit"/>
			  	  <input id="edit_item_save" type="button" value="save" onclick="save_item_details()"/>
			  </div>
		  </div>
		</div>
	<script>
// dragElement(document.getElementById("sw_0"));
// dragElement(document.getElementById("sw_1"));
dragElement(document.getElementById("control_panel"));
document.getElementById("new_item_add").onclick=add_item;
document.getElementById("start_poll").onclick=JsonPollCycle;
document.onreadystatechange = function () {
    if (document.readyState == "complete") {
        JsonPollCycle();
    }
}
	</script>
	</body>
</html>
<!--
/* beautify ignore:end*/
-->