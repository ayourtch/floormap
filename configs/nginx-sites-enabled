##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
#
map $sent_http_content_type $expires {
    default                    off;
    text/html                  off;
    text/css                   off;
    application/javascript     off;
    ~image/                    max;
}

proxy_cache_path  /tmp/nginx-cache  levels=1:2    keys_zone=STATIC:10m
                   inactive=24h  max_size=1g;

proxy_read_timeout 1200;
client_max_body_size 32M;

map $http_x_forwarded_proto $thescheme {
     default $scheme;
     https https;
}


server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location @check_auth_error {
		return 401 "Unauthorized\n\n";
        }
	location /check_auth {
                proxy_method GET;
                # proxy_pass_request_headers off;
                internal;
                # the next two lines are required for correct handling of auth POST/PUT requests
                proxy_pass_request_body off;
                proxy_set_header        Content-Length "";
                # check the running asp10auth
                proxy_pass   http://127.0.0.1:4480;
                # ensure we catch the proxy errors
                proxy_intercept_errors on;
                # change the 302->401
                error_page 302 =401 @check_auth_error;
        }
        error_page 401 = @error401;
        location @error401 {
          # this snippet URLencodes up to 5 pairs of the variables in a get request...
          set $original_uri "/";
          if ($request_uri ~* "(^.*$)" ) {
            set $original_uri '$1';
          }
          # replace the question mark
          if ($original_uri ~* "^(.*?)\?+(.*)$") {
            set $original_uri "$1%3F$2";
          }
          # replace the "&" with urlencoded versions
          if ($original_uri ~* "^(.*?)&+(.*)$") {
            set $original_uri "$1%26$2";
          }
          if ($original_uri ~* "^(.*?)&+(.*)$") {
            set $original_uri "$1%26$2";
          }
          if ($original_uri ~* "^(.*?)&+(.*)$") {
            set $original_uri "$1%26$2";
          }
          if ($original_uri ~* "^(.*?)&+(.*)$") {
            set $original_uri "$1%26$2";
          }
          if ($original_uri ~* "^(.*?)&+(.*)$") {
            set $original_uri "$1%26$2";
          }
          return 302 "/login?ReturnUrl=$original_uri";
          # old config
          if ($request_uri ~* "(^.*$)" ) {
            set $original_uri $1;
            return 302 /Administration/Login.aspx?ReturnUrl=$original_uri;
          }
          # rewrite ^(.*) /Administration/Login.aspx?ReturnUrl=$1 last;
          return 302 /login;
        }


	location /users {
		auth_request /check_auth;
                proxy_buffering off;
                proxy_pass   http://127.0.0.1:4480;
                proxy_set_header Host            $host;
                proxy_set_header X-Forwarded-Proto $thescheme;
        }
	location /whoami {
		auth_request /check_auth;
                proxy_pass   http://127.0.0.1:4480;
                proxy_set_header Host            $host;
                proxy_set_header X-Forwarded-Proto $thescheme;
                rewrite ^/(.*)$ /check_auth break;
        }
	location /login {
                proxy_pass   http://127.0.0.1:4480;
                proxy_set_header Host            $host;
                proxy_set_header X-Forwarded-Proto $thescheme;
        }
	location /do_sso {
                proxy_pass   http://127.0.0.1:4480;
                proxy_set_header Host            $host;
                proxy_set_header X-Forwarded-Proto $thescheme;
        }
	location /logout {
                proxy_pass   http://127.0.0.1:4480;
                proxy_set_header Host            $host;
                proxy_set_header X-Forwarded-Proto $thescheme;
        }

	location /XXXX {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		# try_files $uri $uri/ =404;
                 index index.html index.htm default.aspx Default.aspx;
                 fastcgi_index Default.aspx;
                 fastcgi_pass 127.0.0.1:9000;
                 fastcgi_read_timeout 600;
                 include /etc/nginx/fastcgi_params;

       }
       location /Register.aspx {
               proxy_pass http://127.0.0.1:4280;
               proxy_set_header        X-Real-IP       $remote_addr;
               proxy_set_header Host            $host;
                proxy_set_header X-Forwarded-Proto $thescheme;
	}

        location / {
                # rewrite ^/floormap/(.*)$ /$1 break;
                # auth_basic           "Restricted Access!";
    	        # auth_basic_user_file /etc/nginx/conf.d/.htpasswd; 
		# auth_request /check_auth;

                proxy_pass http://127.0.0.1:4242;
                proxy_set_header        X-Real-IP       $remote_addr;
                proxy_set_header Host            $host;
                proxy_set_header X-Forwarded-Proto $thescheme;
        }
        location  /uploaded-files/ {
		auth_request /check_auth;
		try_files $uri $uri/ =404;
                rewrite ^/uploaded-files/(.*)$ /$1 break;
                root /var/a3s/http/uploads;
        }
        location = /upload {
                # rewrite ^/floormap/(.*)$ /$1 break;
		auth_request /check_auth;
                # auth_basic           "Restricted Access!";
    	        # auth_basic_user_file /etc/nginx/conf.d/.htpasswd; 

                proxy_pass http://127.0.0.1:4243;
                proxy_set_header        X-Real-IP       $remote_addr;
                proxy_set_header Host            $host;
                proxy_set_header X-Forwarded-Proto $thescheme;
        }
        location /images/ {
                # auth_basic           "Restricted Access!";
    	        # auth_basic_user_file /etc/nginx/conf.d/.htpasswd; 
		auth_request /check_auth;
                # rewrite ^/floormap/(.*)$ /$1 break;
                proxy_pass http://127.0.0.1:4242;
                proxy_set_header        X-Real-IP       $remote_addr;
                proxy_set_header Host            $host;
                proxy_set_header X-Forwarded-Proto $thescheme;

		# cache the images on the nginx side
                proxy_buffering        on;
                proxy_cache            STATIC;
                proxy_cache_valid      200  1d;
                proxy_cache_use_stale  error timeout invalid_header updating
                                       http_500 http_502 http_503 http_504;
		# make browser not request them
                expires $expires;
                add_header Pragma public;
                add_header Cache-Control "public";
        }



	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
